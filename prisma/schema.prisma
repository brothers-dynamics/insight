// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  username  String
  password  String
  firstname String
  lastname  String
  active    Boolean @default(true)
  roles     Role[]

  createdDocuments    Document[]        @relation(name: "create")
  bookmarkedDocuments Document[]        @relation(name: "bookmark")
  readDocuments       Document[]        @relation(name: "read")
  likedDocuments      Document[]        @relation(name: "like")
  approvals           Approval[]
  revisionRequests    RevisionRequest[]
  logs                Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id         Int          @id @default(autoincrement())
  name       String
  privileges Privileges[]

  users            User[]
  relatedDocuments Document[]

  createdAt DateTime @default(now())
}

model Document {
  id       Int          @id @default(autoincrement())
  code     String
  version  Int          @default(autoincrement())
  author   User         @relation(name: "create", fields: [authorId], references: [id], onDelete: Restrict)
  authorId Int
  type     documentType
  title    String       @unique
  domains  Role[]
  tags     Tag[]

  approval        Approval?
  revisionRequest RevisionRequest?
  bookmarkedBy    User[]           @relation(name: "bookmark")
  readBy          User[]           @relation(name: "read")
  likedBy         User[]           @relation(name: "like")

  // other types must be added here
  knowledge Knowledge?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([code, version])
}

model Knowledge {
  content    String   @unique
  summery    String   @default("")
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int      @unique

  createdAt DateTime @default(now())
}

model Tag {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String

  documents Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Approval {
  id         Int      @id @default(autoincrement())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Restrict)
  documentId Int      @unique
  approver   User     @relation(fields: [approverId], references: [id], onDelete: Restrict)
  approverId Int

  createdAt DateTime @default(now())
}

model RevisionRequest {
  id         Int      @id @default(autoincrement())
  document   Document @relation(fields: [documentId], references: [id])
  documentId Int      @unique
  proposer   User     @relation(fields: [userId], references: [id])
  userId     Int
  message    String

  createdAt DateTime @default(now())
}

model Log {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  action    Action
  data      Json
  createdAt DateTime @default(now())
}

enum documentType {
  KNOWLEDGE
}

enum Privileges {
  ADMIN
  CREATE_USER
  UPDATE_USER
  CREATE_KNOWLEDGE
  APPROVE_KNOWLEDGE
  CREATE_MANUAL
  APPROVE_MANUAL
  CREATE_PROCEDURE
  APPROVE_PROCEDURE
  CREATE_POLICY
  APPROVE_POLICY
  CREATE_TAG
  UPDATE_TAG
  CREATE_ROLE
  UPDATE_ROLE
}

enum Action {
  Login
  Logout
  DocumentCreate
  DocumentDelete
  DocumentApprove
  DocumentRead
  UserCreate
  UserDelete
  UserUpdate
  RoleCreate
  RoleDelete
  RoleUpdate
  TagCreate
  TagDelete
  TagUpdate
  MessageSend
  MessageRead
}
